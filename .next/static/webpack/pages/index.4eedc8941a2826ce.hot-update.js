"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/sketchfab.ts":
/*!****************************!*\
  !*** ./utils/sketchfab.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addTexture\": function() { return /* binding */ addTexture; },\n/* harmony export */   \"changeColor\": function() { return /* binding */ changeColor; },\n/* harmony export */   \"emissionAnimation\": function() { return /* binding */ emissionAnimation; },\n/* harmony export */   \"fastChangeMainColor\": function() { return /* binding */ fastChangeMainColor; },\n/* harmony export */   \"generateScreenshot\": function() { return /* binding */ generateScreenshot; },\n/* harmony export */   \"getCamera\": function() { return /* binding */ getCamera; },\n/* harmony export */   \"getMaterials\": function() { return /* binding */ getMaterials; },\n/* harmony export */   \"getNodeList\": function() { return /* binding */ getNodeList; },\n/* harmony export */   \"initService\": function() { return /* binding */ initService; },\n/* harmony export */   \"setCamera\": function() { return /* binding */ setCamera; },\n/* harmony export */   \"setMetallic\": function() { return /* binding */ setMetallic; },\n/* harmony export */   \"setTexture\": function() { return /* binding */ setTexture; },\n/* harmony export */   \"setUVscale\": function() { return /* binding */ setUVscale; },\n/* harmony export */   \"toggleNode\": function() { return /* binding */ toggleNode; }\n/* harmony export */ });\nlet api = null;\nlet materials = [];\nlet nodes = [];\n//Set Sektfhcab API to make it available\nconst initService = (apiRef, materialList, nodeList)=>{\n    api = apiRef;\n    materials = materialList;\n    nodes = nodeList;\n    console.log(materialList);\n};\nconst getMaterials = ()=>{\n    return materials;\n};\nconst getNodeList = ()=>{\n    return nodes;\n};\nconst getCamera = ()=>{\n    api.getCameraLookAt(function(err, camera) {\n        console.log(camera.position); // [x, y, z]\n        console.log(camera.target); // [x, y, z]\n    });\n};\nconst setCamera = (param)=>{\n    let { position , target  } = param;\n    api.setCameraLookAt(position, target, 2);\n};\nconst changeColor = async (part, colorCode)=>{\n    let index = materials.findIndex((m)=>{\n        return m.name === part;\n    });\n    //materials[index].channels.AlbedoPBR.color = [color.r / 255, color.g / 255, color.b / 255];\n    materials[index].channels.AlbedoPBR.color = [\n        convertRGBtoLinear(colorCode.r),\n        convertRGBtoLinear(colorCode.g),\n        convertRGBtoLinear(colorCode.b)\n    ];\n    await api.setMaterial(materials[index]);\n};\nconst fastChangeMainColor = (param)=>{\n    let { r , g , b  } = param;\n    materials[13].channels.AlbedoPBR.color = [\n        convertRGBtoLinear(r),\n        convertRGBtoLinear(g),\n        convertRGBtoLinear(b)\n    ];\n    api.setMaterial(materials[13]);\n};\nconst addTexture = async (base64)=>{\n    return new Promise((resolve, reject)=>{\n        api.addTexture(base64, function(err, id) {\n            if (!err) {\n                resolve(id);\n            } else {\n                reject(err);\n            }\n        });\n    });\n};\nconst setTexture = (part, textureUid)=>{\n    let index = materials.findIndex((m)=>{\n        return m.name === part;\n    });\n    materials[index].channels.AlbedoPBR = {\n        texture: {\n            uid: textureUid\n        }\n    };\n    materials[index].channels.AlbedoPBR.factor = 1;\n    api.setMaterial(materials[index], ()=>{});\n};\nconst setUVscale = (part)=>{\n    let index = materials.findIndex((m)=>{\n        return m.name === part;\n    });\n    api.setUVScale(materials[index], \"AlbedoPBR\", 10, 10);\n};\nconst toggleNode = (node, action)=>{\n    let instanceID = nodes.filter((r)=>{\n        return r.name === node;\n    });\n    if (instanceID[0]) {\n        if (action == \"show\") {\n            api.show(instanceID[0].instanceID);\n        } else {\n            api.hide(instanceID[0].instanceID);\n        }\n    }\n};\nfunction convertColor(color) {\n    return [\n        color.r,\n        color.g,\n        color.b\n    ];\n}\nconst generateScreenshot = async ()=>{\n    let camera = {\n        position: [\n            -71.71309445654904,\n            -57.16881106698193,\n            32.2789393429998\n        ],\n        target: [\n            2.701051515138964,\n            0.00007667749023099191,\n            4.360299098332644\n        ]\n    };\n    await api.setCameraLookAt(camera.position, camera.target, 0);\n    let screenshot = await makeScreenshot();\n    return screenshot;\n};\nconst makeScreenshot = async ()=>{\n    return new Promise((resolve, reject)=>{\n        api.getScreenShot(700, 394, \"image/png\", function(error, result) {\n            if (error) {\n                reject(error);\n            } else {\n                const base64WithoutHeader = result.substring(result.indexOf(\",\") + 1);\n                resolve(base64WithoutHeader);\n            }\n        });\n    });\n};\nfunction convertRGBtoLinear(color) {\n    let value = color / 255;\n    if (value <= 0 && value <= 0.04045) {\n        return value / 12.92;\n    } else {\n        return ((value + 0.055) / 1.055) ** 2.4;\n    }\n}\nasync function setMetallic(material, value) {\n    if (value) {\n        material.channels.MetalnessPBR.factor = 1;\n        material.channels.RoughnessPBR.factor = 0.6;\n    } else {\n        material.channels.MetalnessPBR.factor = 0;\n        material.channels.RoughnessPBR.factor = 0.2;\n    }\n    await api.setMaterial(materials[13]);\n}\nfunction emissionAnimation(part) {\n    let index = materials.findIndex((m)=>{\n        return m.name === part;\n    });\n    function changeEmitFactor(i) {\n        materials[index].channels.EmitColor.enable = true;\n        materials[index].channels.EmitColor.factor = i;\n        api.setMaterial(materials[index], ()=>{});\n    }\n    let number = 0;\n    let increment = 0.025;\n    function animateNumber() {\n        number += increment;\n        if (number >= 0.4) {\n            increment = -increment;\n        }\n        if (number > 0) {\n            setTimeout(animateNumber, 10); // Llamar a la función nuevamente después de 10 milisegundos\n        }\n        changeEmitFactor(number);\n    }\n    animateNumber();\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/sketchfab.ts\n"));

/***/ })

});